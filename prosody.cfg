[buildout]
extends = secrets.cfg
parts =
  luarocks
  mkdirs
  prosody
  prosody-debug
  prosody.cfg.lua
  prosodyctl

auto-checkout  =
  prosody-modules
  prosody

[sources]
# Custom source definitions during development.
# Protip: use "hg identify" to see current revision number
prosody-modules = hg https://hg.prosody.im/prosody-modules egg=false
prosody = hg http://hg.prosody.im/0.10 egg=false

[scripty]
recipe = mr.scripty
extra_configure_options =
    import sys, platform, subprocess
    if 'nixos' in ''.join(platform.uname()).lower():
        return ''
    elif 'ubuntu' in ''.join(platform.uname()).lower() or 'linux' in ''.join(platform.uname()).lower():
        return '--ostype=debian'
    elif sys.platform == 'darwin':
        if int(subprocess.check_output("which brew > /dev/null && echo 1 || echo 0", shell=True)):
            return ' --ostype=macosx --with-lua-include=/usr/local/Cellar/lua\@5.1/5.1.5_4/include/lua-5.1'
        else:
            return ' --ostype=macosx --with-lua-include=/opt/local/include/lua-5.1 --with-lua-lib=/opt/local/lib/lua-5.1 --with-idn="idn -L/opt/local/lib"'
    else:
        raise ValueError("Could not determine OS type for Prosody")

use_libevent =
    import sys, platform
    if 'nixos' in ''.join(platform.uname()).lower():
        return 'true'
    elif 'ubuntu' in ''.join(platform.uname()).lower() or 'linux' in ''.join(platform.uname()).lower():
        return 'true'
    elif sys.platform == 'darwin':
        return 'false'
    else:
        raise ValueError("Could not determine OS type for Prosody")

executable =
    import sys, platform
    if 'nixos' in ''.join(platform.uname()).lower():
        return 'luarocks';
    elif 'ubuntu' in ''.join(platform.uname()).lower() or 'linux' in ''.join(platform.uname()).lower():
        return 'luarocks';
    elif sys.platform == 'darwin':
        return 'luarocks-5.1'
    else:
        raise ValueError("Could not determine OS type for Prosody")

luarocks =
    import platform, sys, subprocess
    if 'nixos' in ''.join(platform.uname()).lower():
        return """
    luaossl 20171028-0 CRYPTO_DIR=$OPENSSL_DIR CRYPTO_LIBDIR=$OPENSSL_LIBDIR OPENSSL_DIR=$OPENSSL_DIR OPENSSL_LIBDIR=$OPENSSL_LIBDIR
    lua-zlib 0.4-1 ZLIB_DIR=$ZLIB_DIR
    luadbi-sqlite3 0.5-1 SQLITE_DIR=$SQLITE_DIR
    luaevent 0.4.3-1 EVENT_DIR=$EVENT_DIR EVENT_LIBDIR=$EVENT_LIBDIR
    luaexpat 1.3.0-1 EXPAT_DIR=$EXPAT_DIR
    luasec 0.5-2 OPENSSL_DIR=$OPENSSL_DIR OPENSSL_LIBDIR=$OPENSSL_LIBDIR
        """
    elif 'ubuntu' in ''.join(platform.uname()).lower() or 'linux' in ''.join(platform.uname()).lower():
        return """
    luasec 0.5-2 OPENSSL_LIBDIR=/usr/lib/x86_64-linux-gnu OPENSSL_INCDIR=/usr/include
    lua-zlib 0.4-1
    luadbi-sqlite3 0.5-1
    luaevent 0.4.3-1 EVENT_LIBDIR=/usr/lib/x86_64-linux-gnu EVENT_INCDIR=/usr/include
    luaexpat 1.3.0-1
    luaossl 20171028-0 CRYPTO_DIR=/usr/ CRYPTO_LIBDIR=/usr/lib/x86_64-linux-gnu OPENSSL_LIBDIR=/usr/lib/x86_64-linux-gnu OPENSSL_DIR=/usr
        """
    elif sys.platform == 'darwin':
        if int(subprocess.check_output("which brew > /dev/null && echo 1 || echo 0", shell=True)):
            return """
    luasec 0.5-2 OPENSSL_LIBDIR=/usr/local/opt/openssl/lib OPENSSL_INCDIR=/usr/local/opt/openssl/include
    lua-zlib 0.4-1
    luadbi-sqlite3 0.5-1
    luaevent 0.4.3-1 EVENT_LIBDIR=/usr/local/lib EVENT_INCDIR=/usr/local/include
    luaexpat 1.3.0-1
    luaossl 20171028-0 CRYPTO_DIR=$OPENSSL_DIR OPENSSL_DIR=$OPENSSL_DIR
        """
        else:
            return """
    luasec 0.5-2 OPENSSL_LIBDIR=/opt/local/lib OPENSSL_INCDIR=/opt/local/include
    lua-zlib 0.4-1
    luadbi-sqlite3 0.5-1
    luaevent 0.4.3-1 EVENT_LIBDIR=/opt/local/lib EVENT_INCDIR=/opt/local/include
    luaexpat 1.3.0-1
    luaossl 20171028-0 CRYPTO_DIR=/opt/local CRYPTO_LIBDIR=/opt/local/lib
        """
    else:
        raise ValueError("Could not determine OS type for Prosody")

[luarocks]
# XXX: The lua version should be 5.1
recipe = md.recipe.luarocks
executable = ${scripty:executable}
rocks =
  luadbi 0.5-1
  ${scripty:luarocks}
  basexx 0.3.0-1
  lua-cjson 2.1.0-1
  luabitop 1.0.2-3
  luafilesystem 1.6.2
  luajson 1.3.3-1
  luasocket 3.0rc1-2
  luatz 0.3-1
  mobdebug 0.63-1
  otp 0.1-5
  termfx 0.7-1


[mkdirs]
recipe = z3c.recipe.mkdir
paths =
    ${buildout:directory}/local
    ${buildout:directory}/var/log
    ${buildout:directory}/var/run

[directories]
prosody = ${buildout:parts-directory}/prosody
templates = ${buildout:directory}/templates
var = ${buildout:directory}/var

[prosody]
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}/src/prosody
configure-options =  ${scripty:extra_configure_options} --prefix=${directories:prosody}
ignore-existing = true

[prosodyctl]
recipe = collective.recipe.template[genshi]:genshi
input = ${directories:templates}/prosodyctl.in
output = ${buildout:bin-directory}/prosodyctl
mode = 755

[prosody-debug]
recipe = collective.recipe.template[genshi]:genshi
input = ${directories:templates}/debug.in
output = ${buildout:bin-directory}/debug
mode = 755

[prosody.cfg.lua]
# You can specify a list of accounts that are admins on the server.
# Note that you must create the accounts separately
# (see http://prosody.im/doc/creating_accounts for info)
# Example: admins = "user1@example.org", "user2@example.net"
admins =
pubsub_admins = "system@app.example.org"
# Allow users to register new accounts
allow_registration = true
# The domain under which the server is hosted. The user's Jabber ID will
# use this domain, for example: jcooper@chat.example.org
domain = chat.example.org
daemonize = false
# Should the above domain be enabled?
domain_enabled = true
# The domain at which Prosody must serve HTTP requests (other than "domain" above)
http_host = localhost
# The path to the template used to generate the Prosody configuration file
input = ${directories:templates}/prosody.cfg.lua.in
log_level = debug
log_dir = ${buildout:directory}/var/log
# This is the domain for MUC chat rooms. A chat room has Jabber ID with this
# domain. For example: watercooler@conference.chat.example.org
muc_domain = conference.chat.example.org
# This is the domain for PubSub (Publish Subscribe, XEP-060).
pubsub_domain = pubsub.chat.example.org
# Where the Prosody configuration file is written to
output = ${directories:prosody}/etc/prosody/prosody.cfg.lua
pid_file = ${buildout:directory}/var/run/prosody.pid
# Where to look for add-on modules (for example mod_mam)
plugin_paths = "${buildout:directory}/src/prosody-modules", "${buildout:directory}/src/prosody-modules/mod_auth_hmac", "${buildout:directory}/src/custom-modules"

recipe = collective.recipe.template[genshi]:genshi
ssl_key = "../parts/prosody/etc/prosody/certs/localhost.key"
ssl_certificate = "../parts/prosody/etc/prosody/certs/localhost.crt"
use_libevent = ${scripty:use_libevent}

